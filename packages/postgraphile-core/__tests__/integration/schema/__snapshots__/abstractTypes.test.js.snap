// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with abstract types correctly 1`] = `
union Either

interface NamedEntity

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads a single \`Either\` using its globally unique \`ID\`."""
  either(
    """The globally unique \`ID\` to be used in selecting a single \`Either\`."""
    nodeId: ID!
  ): Either
  eitherById(id: Int!): Either
  globalThing: NamedEntity

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

`;

exports[`prints a schema with star wars types correctly 1`] = `
interface Character

type Droid implements Node {
  """Reads a single \`Character\` that is related to this \`Droid\`."""
  characterById: Character
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  primaryFunction: String
}

"""
A condition to be used against \`Droid\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DroidCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`primaryFunction\` field."""
  primaryFunction: String
}

"""Methods to use when ordering \`Droid\`."""
enum DroidsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_FUNCTION_ASC
  PRIMARY_FUNCTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Methods to use when ordering \`Person\`."""
enum PeopleOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TOTAL_CREDITS_ASC
  TOTAL_CREDITS_DESC
}

type Person implements Node {
  """Reads a single \`Character\` that is related to this \`Person\`."""
  characterById: Character
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  totalCredits: Int
}

"""
A condition to be used against \`Person\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PersonCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`totalCredits\` field."""
  totalCredits: Int
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads a set of \`Droid\`."""
  allDroidsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DroidCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Droid\`."""
    orderBy: [DroidsOrderBy!]
  ): [Droid!]

  """Reads a set of \`Person\`."""
  allPeopleList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Person\`."""
    orderBy: [PeopleOrderBy!]
  ): [Person!]

  """Reads a single \`Character\` using its globally unique \`ID\`."""
  character(
    """The globally unique \`ID\` to be used in selecting a single \`Character\`."""
    nodeId: ID!
  ): Character
  characterById(id: Int!): Character

  """Reads a single \`Droid\` using its globally unique \`ID\`."""
  droid(
    """The globally unique \`ID\` to be used in selecting a single \`Droid\`."""
    nodeId: ID!
  ): Droid
  droidById(id: Int!): Droid

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Reads a single \`Person\` using its globally unique \`ID\`."""
  person(
    """The globally unique \`ID\` to be used in selecting a single \`Person\`."""
    nodeId: ID!
  ): Person
  personById(id: Int!): Person

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

`;
